# Plot using the ggplot geom_sf function.
ggplot() + geom_sf(aes(), data=polygon1)
nrow(hull)
# Plot using the ggplot geom_sf function.
ggplot() +
geom_sf(aes(), data=polygon) +
geom_sf(aes(), data=points)
ggplot() +
geom_sf(aes(), data=points)
df <- data.frame(X = c(0,1), Y = c(0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(df)
# Ecuacion de la recta divisoria
df <- data.frame(X = c(0,1), Y = c(0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(aes(), data=df, color = "red")
polygon1
# Ecuacion de la recta divisoria
df <- data.frame(X = c(0,1), Y = c(0.5, 1.5))
ggplot() + geom_line(aes(), data=df, color = "red")
df
ggplot() + geom_line(aes(x=X, y=Y), data=df, color = "red")
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(aes(x=X, y=Y), data=df, color = "red")
# Ecuacion de la recta divisoria
df <- data.frame(X = c(-0.5,2), Y = c(0, 2.5))
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(aes(x=X, y=Y), data=df, color = "red")
# Ecuacion de la recta divisoria
df <- data.frame(X = c(-0.5,1.5), Y = c(0, 2))
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(aes(x=X, y=Y), data=df, color = "red")
# Ecuacion de la recta divisoria
df1 <- data.frame(X = c(-0.5,1.5), Y = c(-0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) + geom_line(aes(x=X, y=Y), data=df1, color = "red")
# Ecuacion de la recta divisoria
df1 <- data.frame(X = c(-0.5,1.5), Y = c(-0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) +
geom_line(aes(x=X, y=Y), data=df, color = "red") +
geom_line(aes(x=X, y=Y), data=df1, color = "red")
# Puntos por encima de la recta 1
points.sf <- st_as_sf(df, coords = c("x", "y"))
# Puntos por encima de la recta 1
points.sf <- st_as_sf(df, coords = c("X", "Y"))
points.sf
st_crs(points.sf) <- st_crs(4326) # assign crs
points.sf
line.sf <- st_sf(id = 'L1', st_sfc(st_linestring(as.matrix(line.df), dim = "XY")))
line.sf <- st_sf(id = 'L1', st_sfc(st_linestring(as.matrix(polygon1), dim = "XY")))
st_crs(line.sf) <- st_crs(4326) # assign crs
xmin <- min(st_bbox(points.sf)[1], st_bbox(line.sf)[1])
ymin <- min(st_bbox(points.sf)[2], st_bbox(line.sf)[2])
xmax <- max(st_bbox(points.sf)[3], st_bbox(line.sf)[3])
ymax <- max(st_bbox(points.sf)[4], st_bbox(line.sf)[4])
# Add x and y offsets (in degrees units)
offsetX <- 0
offsetY <- 3
polySideUp <- rbind(c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymax'] + offsetY),
c(st_bbox(line.sf)['xmin'] - offsetX,
st_bbox(line.sf)['ymax'] + offsetY),
as.data.frame(st_coordinates(line.sf))[,c(1,2)],
c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymax'] + offsetY))
polySideDown <- rbind(c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymin'] - offsetY),
c(st_bbox(line.sf)['xmin'] - offsetX,
st_bbox(line.sf)['ymin'] - offsetY),
as.data.frame(st_coordinates(line.sf))[,c(1,2)],
c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymin'] - offsetY))
# Create sf objects
polySideUp <- st_sf("id" = 'sideUp', st_sfc(st_polygon(list(as.matrix(polySideUp))), crs = 4326))
polySideDown <- st_sf("id" = 'sideDown', st_sfc(st_polygon(list(as.matrix(polySideDown))), crs = 4326))
# Plot
plot(polySideUp, xlab = "Longitude", ylab = "Latitude", col = "#C72259",
xlim = c(xmin - offsetX, xmax + offsetX), ylim = c(ymin - offsetY, ymax + offsetY), graticule = st_crs(4326), axes = TRUE)
plot(polySideDown, col = "#53A8BD", add = TRUE)
plot(points.sf$geometry, pch = 19, add = TRUE)
plot(line.sf, col = "#272822", lwd = 2, add = TRUE)
text(st_coordinates(points.sf), as.character(points.sf$id), pos = 3)
pointsInSideUp <- st_intersection(points.sf, polySideUp)
plot(polySideUp, xlab = "Longitude", ylab = "Latitude", col = "#C72259",
xlim = c(xmin - offsetX, xmax + offsetX), ylim = c(ymin - offsetY, ymax + offsetY), graticule = st_crs(4326), axes = TRUE)
plot(polySideDown, col = "#53A8BD", add = TRUE)
plot(pointsInSideUp, pch = 19, col = "#53A8BD", add = TRUE)
plot(pointsInSideDown, pch = 19, col = "#C72259", add = TRUE)
plot(line.sf, lwd = 2, col = "#272822", add = TRUE)
text(st_coordinates(points.sf), as.character(points.sf$id), pos = 3)
line.sf <- st_sf(id = 'L1', st_sfc(st_linestring(as.matrix(polygon1), dim = "XY")))
st_crs(line.sf) <- st_crs(4326) # assign crs
xmin <- min(st_bbox(points.sf)[1], st_bbox(line.sf)[1])
ymin <- min(st_bbox(points.sf)[2], st_bbox(line.sf)[2])
xmax <- max(st_bbox(points.sf)[3], st_bbox(line.sf)[3])
ymax <- max(st_bbox(points.sf)[4], st_bbox(line.sf)[4])
# Add x and y offsets (in degrees units)
offsetX <- 0
offsetY <- 3
polySideUp <- rbind(c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymax'] + offsetY),
c(st_bbox(line.sf)['xmin'] - offsetX,
st_bbox(line.sf)['ymax'] + offsetY),
as.data.frame(st_coordinates(line.sf))[,c(1,2)],
c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymax'] + offsetY))
polySideDown <- rbind(c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymin'] - offsetY),
c(st_bbox(line.sf)['xmin'] - offsetX,
st_bbox(line.sf)['ymin'] - offsetY),
as.data.frame(st_coordinates(line.sf))[,c(1,2)],
c(st_bbox(line.sf)['xmax'] + offsetX,
st_bbox(line.sf)['ymin'] - offsetY))
# Create sf objects
polySideUp <- st_sf("id" = 'sideUp', st_sfc(st_polygon(list(as.matrix(polySideUp))), crs = 4326))
polySideDown <- st_sf("id" = 'sideDown', st_sfc(st_polygon(list(as.matrix(polySideDown))), crs = 4326))
# Plot
plot(polySideUp, xlab = "Longitude", ylab = "Latitude", col = "#C72259",
xlim = c(xmin - offsetX, xmax + offsetX), ylim = c(ymin - offsetY, ymax + offsetY), graticule = st_crs(4326), axes = TRUE)
plot(polySideDown, col = "#53A8BD", add = TRUE)
plot(points.sf$geometry, pch = 19, add = TRUE)
plot(line.sf, col = "#272822", lwd = 2, add = TRUE)
text(st_coordinates(points.sf), as.character(points.sf$id), pos = 3)
# Select points in side up
pointsInSideUp <- st_intersection(points.sf, polySideUp)
print(pointsInSideUp)
# Select points in side down
pointsInSideDown <- st_intersection(points.sf, polySideDown)
print(pointsInSideDown)
plot(polySideUp, xlab = "Longitude", ylab = "Latitude", col = "#C72259",
xlim = c(xmin - offsetX, xmax + offsetX), ylim = c(ymin - offsetY, ymax + offsetY), graticule = st_crs(4326), axes = TRUE)
plot(polySideDown, col = "#53A8BD", add = TRUE)
plot(pointsInSideUp, pch = 19, col = "#53A8BD", add = TRUE)
plot(pointsInSideDown, pch = 19, col = "#C72259", add = TRUE)
plot(line.sf, lwd = 2, col = "#272822", add = TRUE)
text(st_coordinates(points.sf), as.character(points.sf$id), pos = 3)
#############################
library(tidyverse)
F <- approxfun(x=df$X, y=df$Y)
F
F(1) > 1
hull[F(hull$X) > Y,]
hull[F(hull$X) > hull$Y,]
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[F(hull$X) <= hull$Y,]
ggplot() + geom_point(aes(), data=aux, color = "red") + geom_point(aes(), data=aux1, color = "blue")
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") + geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
F <- approxfun(x=df$X, y=df$Y)
G <- approxfun(x=df1$X, y=df1$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) <= hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
nrow(aux)
nrow(aux1)
48+33
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
aux = hull[F(hull$X) < hull$Y,]
aux1 = hull[G(hull$X) <= hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) > hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
F <- approxfun(x=df$X, y=df$Y)
G <- approxfun(x=df1$X, y=df1$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red")
F <- approxfun(x=df1$X, y=df1$Y)
G <- approxfun(x=df1$X, y=df1$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red")
G <- approxfun(x=df$X, y=df$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red")
G <- approxfun(x=df$X, y=df$Y)
aux1 = hull[G(hull$X) > hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red")
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red")
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
F <- approxfun(x=df1$X, y=df1$Y)
G <- approxfun(x=df$X, y=df$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
nrow(aux)
nrow(aux1)
library(tidyverse)
library(ggplot2)
library(sf)
x1 <- seq(0, 1, 0.1)
df1 <- data.frame(x=x1, y=(x1*x1), type="y=xÂ²")
x2 <- seq(0, 1, 0.1)
df2 <- data.frame(x=x2, y=sqrt(x2)+0.5, type="y=sqrt(x)+0.5")
df <- rbind(df1, df2)
ggplot(df) + geom_line(aes(x, y, colour=type)) +
geom_segment(aes(x=0,y=0,xend=0,yend=0.5), col = "darkgreen", lty = "dotted") +
geom_segment(aes(x=1,y=1,xend=1,yend=1.5), col = "darkgreen", lty = "dotted")
polygon = list(matrix(c(0,0, 0.25,0.0625, 0.5,0.25, 0.75,0.5625, 1,1, 1,1.5, 0.5,1.207, 0.1,0.816, 0,0.5, 0,0), ncol=2, byrow=T))
# Create an sf polygon
polygon = sf::st_polygon(polygon)
# Sample random points within the polygon
points = sf::st_sample(polygon, size=1000000)
ggplot() +
geom_sf(aes(), data=points)
puntos = points %>% sf::st_coordinates() %>% as.data.frame()
# Find the convex hull of the points being plotted
hull <- puntos %>%
slice(chull(X, Y))
cadena = c()
for(i in 1:nrow(hull)){
cadena <- c(cadena, hull[i,1], hull[i,2])
}
polygon1 = list(matrix(cadena, ncol=2, byrow=T))
# Create an sf polygon
polygon1 = sf::st_polygon(polygon)
# Plot using the ggplot geom_sf function.
ggplot() + geom_sf(aes(), data=polygon1)
# Ecuacion de la recta divisoria
df <- data.frame(X = c(-0.5,1.5), Y = c(0, 2))
df1 <- data.frame(X = c(-0.5,1.5), Y = c(-0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) +
geom_line(aes(x=X, y=Y), data=df, color = "red") +
geom_line(aes(x=X, y=Y), data=df1, color = "red")
F <- approxfun(x=df1$X, y=df1$Y)
G <- approxfun(x=df$X, y=df$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
#############################
library(tidyverse)
x <- seq(-0.5,1.5,0.1)
lo <- loess(aux1~x)
lo <- loess(aux1$Y~aux1$X)
plot(x,y)
plot(aux1$X,aux1$Y)
lines(predict(lo), col='red', lwd=2)
plot(aux1$Y,aux1$X)
lines(predict(lo), col='red', lwd=2)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = Y ~ poly(X, 2))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = aux1$Y ~ poly(aux1$X, 2))
aux1
ggplot(aux1, aes(aux1$X, aux1$Y)) + geom_point() +
geom_smooth(method = "gam", formula = aux1$Y ~ poly(aux1$X, 2))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = Y ~ poly(X, 2))
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "loess", span = 0.3, se = FALSE)
geom_smooth(method = "loess", span = 0.3, se = FALSE)
qplot(aux1$X,aux1$Y, geom='smooth', span =0.5)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
qplot(aux1$X, aux1$Y, geom='smooth', span =0.5) +
qplot(aux$X, aux$Y, geom='smooth', span =0.5)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aux1$X, aux1$Y, geom='smooth', span =0.5) +
geom_smooth(aux$X, aux$Y, geom='smooth', span =0.5)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(geom='smooth', span =0.5)
qplot(aux1$X, aux1$Y, geom='smooth', span =0.5)
qplot(aux$X, aux$Y, geom='smooth', span =0.5)
qplot(aux1$X, aux1$Y, geom='smooth', span =0.5) +
qplot(aux$X, aux$Y, geom='smooth', span =0.5)
qplot(aux1$X, aux1$Y, geom='smooth', span =0.2)
qplot(aux1$X, aux1$Y, geom='smooth', span =0.5)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = Y ~ poly(X, 3))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = aux1$Y ~ poly(aux1$X, 3))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = . ~ poly(aux1$X, 3))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = Y ~ poly(X, 3), data = aux1)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = Y ~ poly(X, 5), data = aux1)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = y ~ poly(x, 5))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = y ~ poly(x, 3))
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "loess", span = 0.3, se = FALSE)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "loess", span = 0.3)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue")
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") + ggplot(aux1, aes(X, Y)) +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue")
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(method = "gam", formula = Y ~ poly(X, 3), color = "blue", data = aux1)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(method = "gam", formula = y=Y ~ poly(x=X, 3), color = "blue", data = aux1)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(method = "gam", formula = (y=Y ~ poly(x=X, 3)), color = "blue", data = aux1)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1) +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")+
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1) +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")+
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), color = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue")
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), color = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "red") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred") +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.5) +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.7) +
geom_point(aes(x=X, y=Y), data=aux1, color = "blue") +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 3) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75, size = 2) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75, size = 2)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75, size = 2) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
## PRUEBAS
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "blue", data = aux1) +
geom_smooth(method = "gam", formula = y ~ poly(x, 3), color = "red", data = aux)
ggplot(aux1, aes(X, Y)) + geom_point() +
geom_smooth(method = "loess", span = 0.3)
qplot(aux1$X, aux1$Y, geom = 'smooth', span = 0.5)
library(tidyverse)
library(ggplot2)
library(sf)
x1 <- seq(0, 1, 0.1)
df1 <- data.frame(x=x1, y=(x1*x1), type="y=xÂ²")
x2 <- seq(0, 1, 0.1)
df2 <- data.frame(x=x2, y=sqrt(x2)+0.5, type="y=sqrt(x)+0.5")
df <- rbind(df1, df2)
ggplot(df) + geom_line(aes(x, y, colour=type)) +
geom_segment(aes(x=0,y=0,xend=0,yend=0.5), col = "darkgreen", lty = "dotted") +
geom_segment(aes(x=1,y=1,xend=1,yend=1.5), col = "darkgreen", lty = "dotted")
polygon = list(matrix(c(0,0, 0.25,0.0625, 0.5,0.25, 0.75,0.5625, 1,1, 1,1.5, 0.5,1.207, 0.1,0.816, 0,0.5, 0,0), ncol=2, byrow=T))
# Create an sf polygon
polygon = sf::st_polygon(polygon)
# Sample random points within the polygon
points = sf::st_sample(polygon, size=1000000)
ggplot() +
geom_sf(aes(), data=points)
puntos = points %>% sf::st_coordinates() %>% as.data.frame()
# Find the convex hull of the points being plotted
hull <- puntos %>%
slice(chull(X, Y))
cadena = c()
for(i in 1:nrow(hull)){
cadena <- c(cadena, hull[i,1], hull[i,2])
}
polygon1 = list(matrix(cadena, ncol=2, byrow=T))
# Create an sf polygon
polygon1 = sf::st_polygon(polygon)
# Plot using the ggplot geom_sf function.
ggplot() + geom_sf(aes(), data=polygon1)
# Ecuacion de la recta divisoria
df <- data.frame(X = c(-0.5,1.5), Y = c(0, 2))
df1 <- data.frame(X = c(-0.5,1.5), Y = c(-0.5, 1.5))
ggplot() + geom_sf(aes(), data=polygon1) +
geom_line(aes(x=X, y=Y), data=df, color = "red") +
geom_line(aes(x=X, y=Y), data=df1, color = "red")
F <- approxfun(x=df1$X, y=df1$Y)
G <- approxfun(x=df$X, y=df$Y)
F <- approxfun(x=df1$X, y=df1$Y)
G <- approxfun(x=df$X, y=df$Y)
aux = hull[F(hull$X) > hull$Y,]
aux1 = hull[G(hull$X) < hull$Y,]
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75, size = 2)
ggplot() + geom_point(aes(x=X, y=Y), data=aux, color = "darkred", alpha = 0.75, size = 2) +
geom_point(aes(x=X, y=Y), data=aux1, color = "darkblue", alpha = 0.75, size = 2) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "blue", data = aux1) +
geom_smooth(aes(x=X, y=Y), method = "gam", formula = y ~ poly(x, 3), col = "red", data = aux)
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/Shiny App/Shiny')
install.packages("geoR")
install_version("geoR", version = "1.7-4.1", repos = "http://cran.r-project.org")
install.packages("devtools")
require(devtools)
install.packages("devtools")
install_version("geoR", version = "1.7-4.1", repos = "http://cran.r-project.org")
library("devtools")
library("devtools")
install_version("geoR", version = "1.7-4.1", repos = "http://cran.r-project.org")
library("devtools")
install_version("geoR", version = "1.7-4.1", repos = "http://cran.r-project.org")
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/Shiny App/Shiny')
install.packages("shinyjs")
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/Shiny App/Shiny')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/Shiny App/Shiny')
install.packages(c("htmlTable", "htmlwidgets", "httpuv"))
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
# Return predictions
return(output)
source('~/climaticSystemPredictions-master/R/randomForesPrediction.R')
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
library(MLmetrics)
library(varImp)
install.packages("varImp")
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
shiny::runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
indices <- sample(10, 3)
indices
!indices
[1:10]
c(1:10)
setdiff(c(1:10), indices)
install.packages("doParallel")
setwd("~/Escritorio/Humedad mediante imgs - Yago")
shiny::runApp('~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
runApp('~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50')
setwd("~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50")
setwd("~/Escritorio/Ubutu trabajo/Escritorio/Investigacion/Missing values/shiny app/IC50")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
system('octave --eval "hardBME_mejorado.m"')
system('octave "hardBME_mejorado.m"')
system('octave "hardBME_mejorado"')
system('octave hardBME_mejorado.m')
system('octave "code/hardBME_mejorado.m"')
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
